components:
  schemas:
    Item:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        image:
          type: string
        category:
          type: string
        brand:
          type: string
        state:
          type: string
          enum: [Mint, SligthlyDamaged, Damaged, Broken]
        basePrice:
          type: number
        dailyPrice:
          type: number
        discount:
          type: number
        enabled:
          type: boolean
        unavailable:
          type: array
          items:
            type: object
            properties:
              from:
                type: string
                format: date
              to:
                type: string
                format: date

    Rental:
      type: object
      properties:
        id:
          type: string
        user:
          type: string
        resp:
          type: string
        item:
          type: string
        state:
          type: string
          enum: [Booked, Accepted, Ongoing, Expired, Returned]
        from:
          type: string
          format: date
        to:
          type: string
          format: date
        return:
          type: string
          format: date
        price:
          type: number
          description: e.g. 100.50
        discount:
          type: number
          description: e.g. 100.50
        loyalty:
          type: number
          description: points used
        surcharge:
          type: number
          description: e.g. 100.50
        annotation:
          $ref: '#/components/schemas/Annotation'

    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
          format: email
        username:
          type: string
        phone:
          type: string
        role:
          type: string
          enum: [user, backoffice, manager]
        loyalty:
          type: number
          description: Loyalty points collected
        annotation:
          $ref: '#/components/schemas/Annotation'
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user

    Annotation:
      type: object
      properties:
        quick:
          type: array
          items:
            type: string
        text:
          type: string

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
